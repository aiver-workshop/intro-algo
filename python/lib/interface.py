# environment python 3.7from enum import Enumclass Side(Enum):    Buy = 0    Sell = 1class OrderType(Enum):    # Limit GTC    Limit = 0    StopLimit = 1    Market = 2    StopMarket = 3    # Limit postonly    PostOnly = 4    # Limit IOC    IOC = 5class Tier:    def __init__(self, price, size, quote_id=None):        self.price = price        self.size = size        self.quote_id = quote_id    def __str__(self):        return '{' + str(self.price) + ", " + str(self.size) + '}'class OrderBook:    def __init__(self, timestamp, bids, asks, sorted=True):        self.timestamp = timestamp        self.sorted = sorted        # self.bids = bids  # List of Tier        self.bids = bids if self.sorted else self._sort(bids, reverse=True)        # self.asks = asks  # List of Tier        self.asks = asks if self.sorted else self._sort(asks, reverse=False)    def __str__(self):        # if self.timestamp is None:        #     string = '\n Bids:'        # else:        #     string = self.timestamp.isoformat() + '\n Bids:'        string = ' Bids:'        for tier in self.bids[:4]:            string += str(tier)        string = string + ' Asks:'        for tier in self.asks[:4]:            string += str(tier)        return string    def _sort(self, data, reverse=True):        return sorted(data, key=lambda x: x.price, reverse=reverse)    def get_full_str(self):        string = ' Bids:'        for tier in self.bids:            string += '{' + str(tier.price) + ", " + str(tier.size) + ", " + str(tier.quote_id) + '}'        string = string + ' Asks:'        for tier in self.asks:            string += '{' + str(tier.price) + ", " + str(tier.size) + ", " + str(tier.quote_id) + '}'        return string# Create orderclass NewOrderSingle:    def __init__(self, symbol: 'str', side: 'Side', quantity: 'float', type: 'OrderType', price=None, post_only=False):        self.symbol = symbol        self.side = side        self.price = price        self.quantity = quantity        self.type = type        # post_only='y' means the order will only make liquidity not take. post_only=None means it can make or take.        self.post_only = post_only    def __str__(self):        return "symbol=" + self.symbol + \               ", side=" + str(self.side) + \               ", price=" + str(self.price) + \               ", quantity=" + str(self.quantity) + \               ", type=" + str(self.type) + \               ", post_only=" + str(self.post_only)# Get order / Cancel orderclass Order:    def __init__(self, orderID, side, leavesQty, symbol, timestamp, type, price=None):        self.orderID = orderID        self.side = side        self.leavesQty = leavesQty        self.symbol = symbol        self.timestamp = timestamp        self.price = price        self.type = type    def __str__(self):        return "OrderID=" + str(self.orderID) + \               ", Symbol=" + self.symbol + \               ", Side=" + str(self.side) + \               ", Price=" + str(self.price) + \               ", LeavesQty=" + str(self.leavesQty) + \               ", Timestamp=" + str(self.timestamp) + \               ", Type=" + str(self.type)class InstrumentDetails:    def __init__(self, contract_name, tick_size, quantity_size=0):        self.contract_name = contract_name        self.tick_size = tick_size        self.quantity_size = quantity_size    def __str__(self):        return "Symbol=" + self.contract_name + \               ", Tick Size=" + str(self.tick_size) + \               ", Quantity Size=" + str(self.quantity_size)