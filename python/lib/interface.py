# environment python 3.7from enum import Enumclass Side(Enum):    Buy = 0    Sell = 1class OrderType(Enum):    Limit = 0   # Limit GTC    StopLimit = 1    Market = 2    StopMarket = 3    PostOnly = 4    IOC = 5     # Limit IOC# A price tier in the order bookclass Tier:    def __init__(self, price: float, size: float, quote_id: str = None):        self.price = price        self.size = size        self.quote_id = quote_id    def __str__(self):        return '{' + str(self.price) + ", " + str(self.size) + '}'# An order book with bid and ask sidesclass OrderBook:    def __init__(self, timestamp: float, bids: [Tier], asks: [Tier]):        self.timestamp = timestamp        self.bids = bids        self.asks = asks    def __str__(self):        string = ' Bids:'        for tier in self.bids[:4]:            string += str(tier)        string = string + ' Asks:'        for tier in self.asks[:4]:            string += str(tier)        return string    def get_full_str(self):        string = ' Bids:'        for tier in self.bids:            string += '{' + str(tier.price) + ", " + str(tier.size) + ", " + str(tier.quote_id) + '}'        string = string + ' Asks:'        for tier in self.asks:            string += '{' + str(tier.price) + ", " + str(tier.size) + ", " + str(tier.quote_id) + '}'        return string# To create a new order.# Note: post_only = True means the order will only make liquidity not take; False means it can make or take.class NewOrderSingle:    def __init__(self,                 symbol: str,                 side: Side,                 quantity: float,                 order_type: OrderType,                 price: float = None,                 post_only=False):        self.symbol = symbol        self.side = side        self.price = price        self.quantity = quantity        self.type = order_type        self.post_only = post_only    def __str__(self):        return "symbol=" + self.symbol + \               ", side=" + str(self.side) + \               ", price=" + str(self.price) + \               ", quantity=" + str(self.quantity) + \               ", type=" + str(self.type) + \               ", post_only=" + str(self.post_only)# Get order / Cancel orderclass Order:    def __init__(self,                 order_id: str,                 side: Side,                 leaves_qty: float,                 symbol: str,                 timestamp: float,                 order_type: OrderType,                 price: float = None):        self.order_id = order_id        self.side = side        self.leaves_qty = leaves_qty        self.symbol = symbol        self.timestamp = timestamp        self.price = price        self.type = order_type    def __str__(self):        return "OrderID=" + str(self.order_id) + \               ", Symbol=" + self.symbol + \               ", Side=" + str(self.side) + \               ", Price=" + str(self.price) + \               ", LeavesQty=" + str(self.leaves_qty) + \               ", Timestamp=" + str(self.timestamp) + \               ", Type=" + str(self.type)class InstrumentDetails:    def __init__(self, contract_name, tick_size, quantity_size=0):        self.contract_name = contract_name        self.tick_size = tick_size        self.quantity_size = quantity_size    def __str__(self):        return "Symbol=" + self.contract_name + \               ", Tick Size=" + str(self.tick_size) + \               ", Quantity Size=" + str(self.quantity_size)